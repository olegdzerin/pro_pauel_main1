история
statusCode <Число>
statusMessage <Строка>
headers <Object>
Возвращает: <http.ServerResponse>
Отправляет заголовок ответа на запрос. Код состояния представляет собой трехзначный код состояния HTTP, например 404. Последний аргумент headers- это заголовки ответа. При желании statusMessageв качестве второго аргумента можно указать удобочитаемое человеком .

Возвращает ссылку на ServerResponse, так что вызовы могут быть связаны.

const body = 'hello world';
response
  .writeHead(200, {
    'Content-Length': Buffer.byteLength(body),
    'Content-Type': 'text/plain'
  })
  .end(body);
Этот метод должен вызываться только один раз в сообщении и должен вызываться до response.end()вызова.

Если response.write()или response.end()вызывается перед вызовом этого, неявные / изменяемые заголовки будут вычислены и вызовут эту функцию.

Когда заголовки были установлены с response.setHeader(), они будут объединены с любыми переданными заголовками response.writeHead(), с заголовками, переданными с response.writeHead()данным приоритетом.

Если этот метод вызывается и response.setHeader()не был вызван, он будет напрямую записывать предоставленные значения заголовка в сетевой канал без внутреннего кэширования, и response.getHeader()заголовок on не даст ожидаемого результата. Если требуется прогрессивная популяция заголовков с возможным будущим поиском и модификацией, используйте response.setHeader()вместо этого.

// Returns content-type = text/plain
const server = http.createServer((req, res) => {
  res.setHeader('Content-Type', 'text/html');
  res.setHeader('X-Foo', 'bar');
  res.writeHead(200, { 'Content-Type': 'text/plain' });
  res.end('ok');
});
Content-Lengthдается в байтах, а не в символах. Используется Buffer.byteLength()для определения длины тела в байтах. Node.js не проверяет, равны ли Content-Lengthи длина тела, которое было передано, или нет.

Попытка установить имя поля заголовка или значение, которое содержит недопустимые символы, приведет к TypeErrorвыбросу.

response.writeProcessing()#
Добавлено в: v10.0.0
Отправляет клиенту сообщение HTTP / 1.1 102 Processing, указывающее, что тело запроса должно быть отправлено.

Учебный класс: http.IncomingMessage#
история
Расширяется: <stream.Readable>
IncomingMessageОбъект создается с помощью http.Serverили http.ClientRequestи передается в качестве первого аргумента к 'request' и 'response'события соответственно. Может использоваться для доступа к статусу ответа, заголовкам и данным.

Событие: 'aborted'#
Добавлено в: v0.3.8
Издается, когда запрос был прерван.

Событие: 'close'#
Добавлено в: v0.4.2
Указывает, что основное соединение было закрыто.

message.aborted#
Добавлено в: v10.1.0
<Логическое>
message.abortedИмущество будет , trueесли запрос был прерван.

message.complete#
Добавлено в: v0.3.0
<Логическое>
message.completeСобственность будет , trueесли сообщение о завершении HTTP было получено и успешно проанализировано.

Это свойство особенно полезно в качестве средства определения того, полностью ли клиент или сервер передал сообщение до того, как соединение было разорвано:

const req = http.request({
  host: '127.0.0.1',
  port: 8080,
  method: 'POST'
}, (res) => {
  res.resume();
  res.on('end', () => {
    if (!res.complete)
      console.error(
        'The connection was terminated while the message was still being sent');
  });
});
message.destroy([error])#
Добавлено в: v0.3.0
error <Ошибка>
Вызывает destroy()сокет, который получил IncomingMessage. Если error указано, 'error'событие генерируется в сокете и errorпередается в качестве аргумента любым слушателям события.

message.headers#
Добавлено в: v0.1.5
<Object>
Объект заголовка запроса / ответа.

Пары ключ-значение имен и значений заголовков. Имена заголовков в нижнем регистре.

// Prints something like:
//
// { 'user-agent': 'curl/7.22.0',
//   host: '127.0.0.1:8000',
//   accept: '*/*' }
console.log(request.headers);
Дубликаты в необработанных заголовках обрабатываются следующими способами, в зависимости от имени заголовка:

Дубликаты age, authorization, content-length, content-type, etag, expires, from, host, if-modified-since, if-unmodified-since, last-modified, location, max-forwards, proxy-authorization, referer, retry-after, server, или user-agentотбрасываются.
set-cookieвсегда массив Дубликаты добавляются в массив.
Для дублированных cookieзаголовков значения объединяются вместе с '; ».
Для всех остальных заголовков значения объединяются с помощью ','.
message.httpVersion#
Добавлено в: v0.1.1
<Строка>
В случае запроса сервера, версия HTTP отправляется клиентом. В случае ответа клиента - HTTP-версия подключенного сервера. Вероятно , либо '1.1'или '1.0'.

Также message.httpVersionMajorявляется первым целым числом и message.httpVersionMinorявляется вторым.

message.method#
Добавлено в: v0.1.1
<Строка>
Действителен только для запроса, полученного от http.Server.

Метод запроса в виде строки. Только для чтения Примеры: 'GET', 'DELETE'.

message.rawHeaders#
Добавлено в: v0.11.6
<Строка []>
Необработанные заголовки запроса / ответа отображаются точно в том виде, в котором они были получены.

Ключи и значения находятся в одном списке. Это не список кортежей. Таким образом, смещения с четным номером являются ключевыми значениями, а смещения с нечетным номером являются соответствующими значениями.

Имена заголовков не в нижнем регистре, а дубликаты не объединяются.

// Prints something like:
//
// [ 'user-agent',
//   'this is invalid because there can be only one',
//   'User-Agent',
//   'curl/7.22.0',
//   'Host',
//   '127.0.0.1:8000',
//   'ACCEPT',
//   '*/*' ]
console.log(request.rawHeaders);
message.rawTrailers#
Добавлено в: v0.11.6
<Строка []>
Необработанные ключи и значения трейлера запроса / ответа в точности соответствуют их получению. Только заселены на 'end'мероприятии.

message.setTimeout(msecs[, callback])#
Добавлено в: v0.5.9
msecs <Число>
callback <Функция>
Возвращает: <http.IncomingMessage>
Звонки message.connection.setTimeout(msecs, callback).

message.socket#
Добавлено в: v0.3.0
<Stream.Duplex>
net.SocketОбъект , связанный с соединением.

С поддержкой HTTPS используйте request.socket.getPeerCertificate()для получения деталей аутентификации клиента.

Это свойство гарантированно является экземпляром класса <net.Socket> , подкласса <stream.Duplex> , если пользователь не указал тип сокета, отличный от <net.Socket> .

message.statusCode#
Добавлено в: v0.1.1
<Число>
Действителен только для ответа, полученного от http.ClientRequest.

Трехзначный код состояния ответа HTTP. EG 404.

message.statusMessage#
Добавлено в: v0.11.10
<Строка>
Действителен только для ответа, полученного от http.ClientRequest.

Сообщение о статусе ответа HTTP (фраза причины). Например, OKили Internal Server Error.

message.trailers#
Добавлено в: v0.3.0
<Object>
Объект трейлеры запрос / ответ. Только заселены на 'end'мероприятии.

message.url#
Добавлено в: v0.1.90
<Строка>
Действителен только дл